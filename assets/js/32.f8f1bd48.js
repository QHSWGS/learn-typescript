(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{305:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"js中的堆栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#js中的堆栈"}},[t._v("#")]),t._v(" Js中的堆栈")]),t._v(" "),s("p",[t._v("堆"),s("code",[t._v("heap")]),t._v("是动态分配的内存，大小不定也不会自动释放，栈"),s("code",[t._v("stack")]),t._v("为自动分配的内存空间，在代码执行过程中自动释放。")]),t._v(" "),s("h2",{attrs:{id:"栈区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈区"}},[t._v("#")]),t._v(" 栈区")]),t._v(" "),s("p",[t._v("在栈内存中提供一个供"),s("code",[t._v("Js")]),t._v("代码执行的环境，关于作用域以及函数的调用都是栈内存中执行的。"),s("br"),t._v(" "),s("code",[t._v("Js")]),t._v("中基本数据类型"),s("code",[t._v("String")]),t._v("、"),s("code",[t._v("Number")]),t._v("、"),s("code",[t._v("Boolean")]),t._v("、"),s("code",[t._v("Null")]),t._v("、"),s("code",[t._v("Undefined")]),t._v("、"),s("code",[t._v("Symbol")]),t._v("，占用空间小且大小固定，值直接保存在栈内存中，是按值访问，对于"),s("code",[t._v("Object")]),t._v("引用类型，其指针放置于栈内存中，指向堆内存的实际地址，是通过引用访问。"),s("br"),t._v("\n关于调用栈，每调用一个函数，解释器就会把该函数添加进调用栈并开始执行；正在调用栈中执行的函数还调用了其它函数，那么新函数也将会被添加进调用栈，一旦这个函数被调用，便会立即执行；当前函数执行完毕后，解释器将其清出调用栈，继续执行当前执行环境下的剩余的代码；当分配的调用栈空间被占满时，会引发堆栈溢出错误。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Console调试")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("debugger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 断点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ss")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("s")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ss")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n...\nCall Stack\n> s (VM383:4)\n  ss (VM383:7)\n  (anonymous) (VM383:9)\nScope\n  Local\n    b: 11\n    this: Window\n  Global Window\n    ...\n...\n*/")]),t._v("\n")])])]),s("h2",{attrs:{id:"堆区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆区"}},[t._v("#")]),t._v(" 堆区")]),t._v(" "),s("p",[t._v("引用类型"),s("code",[t._v("Object")]),t._v("的变量占据空间大且大小不固定，堆内存中存储实际对象，在栈内存中存储对象的指针，对于对象的访问是按引用访问的，在堆区的内存不会随着程序的运行而自动释放，这就需要实现垃圾回收机制"),s("code",[t._v("GC")]),t._v("，需要注意的是在"),s("code",[t._v("Js")]),t._v("中没有类似于"),s("code",[t._v("C")]),t._v("中的"),s("code",[t._v("free()")]),t._v("函数去手动释放内存，对于堆区内存回收全部需要通过"),s("code",[t._v("Js")]),t._v("的垃圾回收机制去实现。"),s("br"),t._v("\n在栈区中执行的变量等是通过值访问，当其作用域销毁后变量也就随之销毁，而使用引用访问的堆区变量，在一个作用域消失后还可能在外层作用域或者其他作用域仍然存在引用，不能直接销毁，此时就需要通过算法计算该堆区变量是否属于不再需要的变量，从而决定是否需要进行内存回收，在"),s("code",[t._v("Js")]),t._v("中主要有引用计数与标记清除两种垃圾回收算法。")]),t._v(" "),s("h2",{attrs:{id:"每日一题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[t._v("#")]),t._v(" 每日一题")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://github.com/WindrunnerMax/EveryDay\n")])])]),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("https://www.zhihu.com/question/42231657\nhttps://segmentfault.com/a/1190000009693516\nhttps://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);