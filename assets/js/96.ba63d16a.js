(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{369:function(e,n,t){"use strict";t.r(n);var o=t(14),v=Object(o.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"react组件复用的方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react组件复用的方式"}},[e._v("#")]),e._v(" React组件复用的方式")]),e._v(" "),n("p",[e._v("现前端的工程化越发重要，虽然使用"),n("code",[e._v("Ctrl+C")]),e._v("与"),n("code",[e._v("Ctrl+V")]),e._v("同样能够完成需求，但是一旦面临修改那就是一项庞大的任务，于是减少代码的拷贝，增加封装复用能力，实现可维护、可复用的代码就变得尤为重要，在"),n("code",[e._v("React")]),e._v("中组件是代码复用的主要单元，基于组合的组件复用机制相当优雅，而对于更细粒度的逻辑(状态逻辑、行为逻辑等)，复用起来却不那么容易，很难把状态逻辑拆出来作为一个可复用的函数或组件，实际上在"),n("code",[e._v("Hooks")]),e._v("出现之前，都缺少一种简单直接的组件行为扩展方式，对于"),n("code",[e._v("Mixin")]),e._v("、"),n("code",[e._v("HOC")]),e._v("、"),n("code",[e._v("Render Props")]),e._v("都算是在既有(组件机制的)游戏规则下探索出来的上层模式，一直没有从根源上很好地解决组件间逻辑复用的问题，直到"),n("code",[e._v("Hooks")]),e._v("登上舞台，下面我们就来介绍一下"),n("code",[e._v("Mixin")]),e._v("、"),n("code",[e._v("HOC")]),e._v("、"),n("code",[e._v("Render Props")]),e._v("、"),n("code",[e._v("Hooks")]),e._v("四种组件间复用的方式。")]),e._v(" "),n("h2",{attrs:{id:"mixin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#mixin"}},[e._v("#")]),e._v(" Mixin")]),e._v(" "),n("p",[e._v("当然"),n("code",[e._v("React")]),e._v("很久之前就不再建议使用"),n("code",[e._v("Mixin")]),e._v("作为复用的解决方案，但是现在依旧能通过"),n("code",[e._v("create-react-class")]),e._v("提供对"),n("code",[e._v("Mixin")]),e._v("的支持，此外注意在以"),n("code",[e._v("ES6")]),e._v("的"),n("code",[e._v("class")]),e._v("方式声明组件时是不支持"),n("code",[e._v("Mixin")]),e._v("的。"),n("br"),e._v(" "),n("code",[e._v("Mixins")]),e._v("允许多个"),n("code",[e._v("React")]),e._v("组件之间共享代码，它们非常类似于"),n("code",[e._v("Python")]),e._v("中的"),n("code",[e._v("mixins")]),e._v("或"),n("code",[e._v("PHP")]),e._v("中的"),n("code",[e._v("traits")]),e._v("，"),n("code",[e._v("Mixin")]),e._v("方案的出现源自一种"),n("code",[e._v("OOP")]),e._v("直觉，只在早期提供了"),n("code",[e._v("React.createClass() API")]),e._v("("),n("code",[e._v("React v15.5.0")]),e._v("正式废弃，移至"),n("code",[e._v("create-react-class")]),e._v(")来定义组件，自然而然地，(类)继承就成了一种直觉性的尝试，而在"),n("code",[e._v("JavaScript")]),e._v("基于原型的扩展模式下，类似于继承的"),n("code",[e._v("Mixin")]),e._v("方案就成了一个不错的解决方案，"),n("code",[e._v("Mixin")]),e._v("主要用来解决生命周期逻辑和状态逻辑的复用问题，允许从外部扩展组件生命周期，在"),n("code",[e._v("Flux")]),e._v("等模式中尤为重要，但是在不断实践中也出现了很多缺陷:")]),e._v(" "),n("ul",[n("li",[e._v("组件与"),n("code",[e._v("Mixin")]),e._v("之间存在隐式依赖("),n("code",[e._v("Mixin")]),e._v("经常依赖组件的特定方法，但在定义组件时并不知道这种依赖关系)。")]),e._v(" "),n("li",[e._v("多个"),n("code",[e._v("Mixin")]),e._v("之间可能产生冲突(比如定义了相同的"),n("code",[e._v("state")]),e._v("字段)。")]),e._v(" "),n("li",[n("code",[e._v("Mixin")]),e._v("倾向于增加更多状态，这降低了应用的可预测性，导致复杂度剧增。")]),e._v(" "),n("li",[e._v("隐式依赖导致依赖关系不透明，维护成本和理解成本迅速攀升。")]),e._v(" "),n("li",[e._v("难以快速理解组件行为，需要全盘了解所有依赖"),n("code",[e._v("Mixin")]),e._v("的扩展行为，及其之间的相互影响")]),e._v(" "),n("li",[e._v("组件自身的方法和"),n("code",[e._v("state")]),e._v("字段不敢轻易删改，因为难以确定有没有"),n("code",[e._v("Mixin")]),e._v("依赖它。")]),e._v(" "),n("li",[n("code",[e._v("Mixin")]),e._v("也难以维护，因为"),n("code",[e._v("Mixin")]),e._v("逻辑最后会被打平合并到一起，很难搞清楚一个"),n("code",[e._v("Mixin")]),e._v("的输入输出。")])]),e._v(" "),n("p",[e._v("毫无疑问，这些问题是致命的，所以，"),n("code",[e._v("Reactv0.13.0")]),e._v("放弃了"),n("code",[e._v("Mixin")]),e._v("静态横切(类似于继承的复用)，转而走向"),n("code",[e._v("HOC")]),e._v("高阶组件(类似于组合的复用)。")]),e._v(" "),n("h3",{attrs:{id:"示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),n("p",[e._v("上古版本示例，一个通用的场景是"),n("code",[e._v(":")]),e._v("一个组件需要定期更新，用"),n("code",[e._v("setInterval()")]),e._v("做很容易，但当不需要它的时候取消定时器来节省内存是非常重要的，"),n("code",[e._v("React")]),e._v("提供生命周期方法来告知组件创建或销毁的时间，下面的"),n("code",[e._v("Mixin")]),e._v("，使用"),n("code",[e._v("setInterval()")]),e._v("并保证在组件销毁时清理定时器。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('var SetIntervalMixin = {\n  componentWillMount: function() {\n    this.intervals = [];\n  },\n  setInterval: function() {\n    this.intervals.push(setInterval.apply(null, arguments));\n  },\n  componentWillUnmount: function() {\n    this.intervals.forEach(clearInterval);\n  }\n};\n\nvar TickTock = React.createClass({\n  mixins: [SetIntervalMixin], // 引用 mixin\n  getInitialState: function() {\n    return {seconds: 0};\n  },\n  componentDidMount: function() {\n    this.setInterval(this.tick, 1000); // 调用 mixin 的方法\n  },\n  tick: function() {\n    this.setState({seconds: this.state.seconds + 1});\n  },\n  render: function() {\n    return (\n      <p>\n        React has been running for {this.state.seconds} seconds.\n      </p>\n    );\n  }\n});\n\nReactDOM.render(\n  <TickTock />,\n  document.getElementById("example")\n);\n')])])]),n("h2",{attrs:{id:"hoc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hoc"}},[e._v("#")]),e._v(" HOC")]),e._v(" "),n("p",[n("code",[e._v("Mixin")]),e._v("之后，"),n("code",[e._v("HOC")]),e._v("高阶组件担起重任，成为组件间逻辑复用的推荐方案，高阶组件从名字上就透漏出高级的气息，实际上这个概念应该是源自于"),n("code",[e._v("JavaScript")]),e._v("的高阶函数，高阶函数就是接受函数作为输入或者输出的函数，可以想到柯里化就是一种高阶函数，同样在"),n("code",[e._v("React")]),e._v("文档上也给出了高阶组件的定义，高阶组件是接收组件并返回新组件的函数。具体的意思就是"),n("code",[e._v(":")]),e._v("高阶组件可以看作"),n("code",[e._v("React")]),e._v("对装饰模式的一种实现，高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件，他会返回一个增强的"),n("code",[e._v("React")]),e._v("组件，高阶组件可以让我们的代码更具有复用性，逻辑性与抽象性，可以对"),n("code",[e._v("render")]),e._v("方法进行劫持，也可以控制"),n("code",[e._v("props")]),e._v("与"),n("code",[e._v("state")]),e._v("等。"),n("br"),e._v("\n对比"),n("code",[e._v("Mixin")]),e._v("与"),n("code",[e._v("HOC")]),e._v("，"),n("code",[e._v("Mixin")]),e._v("是一种混入的模式，在实际使用中"),n("code",[e._v("Mixin")]),e._v("的作用还是非常强大的，能够使得我们在多个组件中共用相同的方法，但同样也会给组件不断增加新的方法和属性，组件本身不仅可以感知，甚至需要做相关的处理(例如命名冲突、状态维护等)，一旦混入的模块变多时，整个组件就变的难以维护，"),n("code",[e._v("Mixin")]),e._v("可能会引入不可见的属性，例如在渲染组件中使用"),n("code",[e._v("Mixin")]),e._v("方法，给组件带来了不可见的属性"),n("code",[e._v("props")]),e._v("和状态"),n("code",[e._v("state")]),e._v("，并且"),n("code",[e._v("Mixin")]),e._v("可能会相互依赖，相互耦合，不利于代码维护，此外不同的"),n("code",[e._v("Mixin")]),e._v("中的方法可能会相互冲突。之前"),n("code",[e._v("React")]),e._v("官方建议使用"),n("code",[e._v("Mixin")]),e._v("用于解决横切关注点相关的问题，但由于使用"),n("code",[e._v("Mixin")]),e._v("可能会产生更多麻烦，所以官方现在推荐使用"),n("code",[e._v("HOC")]),e._v("。高阶组件"),n("code",[e._v("HOC")]),e._v("属于函数式编程"),n("code",[e._v("functional programming")]),e._v("思想，对于被包裹的组件时不会感知到高阶组件的存在，而高阶组件返回的组件会在原来的组件之上具有功能增强的效果，基于此"),n("code",[e._v("React")]),e._v("官方推荐使用高阶组件。"),n("br"),e._v(" "),n("code",[e._v("HOC")]),e._v("虽然没有那么多致命问题，但也存在一些小缺陷:")]),e._v(" "),n("ul",[n("li",[e._v("扩展性限制"),n("code",[e._v(": HOC")]),e._v("并不能完全替代"),n("code",[e._v("Mixin")]),e._v("，一些场景下，"),n("code",[e._v("Mixin")]),e._v("可以而"),n("code",[e._v("HOC")]),e._v("做不到，比如"),n("code",[e._v("PureRenderMixin")]),e._v("，因为"),n("code",[e._v("HOC")]),e._v("无法从外部访问子组件的"),n("code",[e._v("State")]),e._v("，同时通过"),n("code",[e._v("shouldComponentUpdate")]),e._v("滤掉不必要的更新，因此，"),n("code",[e._v("React")]),e._v("在支持"),n("code",[e._v("ES6Class")]),e._v("之后提供了"),n("code",[e._v("React.PureComponent")]),e._v("来解决这个问题。")]),e._v(" "),n("li",[n("code",[e._v("Ref")]),e._v("传递问题"),n("code",[e._v(": Ref")]),e._v("被隔断，"),n("code",[e._v("Ref")]),e._v("的传递问题在层层包装下相当恼人，函数"),n("code",[e._v("Ref")]),e._v("能够缓解一部分(让"),n("code",[e._v("HOC")]),e._v("得以获知节点创建与销毁)，以致于后来有了"),n("code",[e._v("React.forwardRef API")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("WrapperHell: HOC")]),e._v("泛滥，出现"),n("code",[e._v("WrapperHell")]),e._v("(没有包一层解决不了的问题，如果有，那就包两层)，多层抽象同样增加了复杂度和理解成本，这是最关键的缺陷，而"),n("code",[e._v("HOC")]),e._v("模式下没有很好的解决办法。")])]),e._v(" "),n("h3",{attrs:{id:"示例-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),n("p",[e._v("具体而言，高阶组件是参数为组件，返回值为新组件的函数，组件是将"),n("code",[e._v("props")]),e._v("转换为"),n("code",[e._v("UI")]),e._v("，而高阶组件是将组件转换为另一个组件。"),n("code",[e._v("HOC")]),e._v("在"),n("code",[e._v("React")]),e._v("的第三方库中很常见，例如"),n("code",[e._v("Redux")]),e._v("的"),n("code",[e._v("connect")]),e._v("和"),n("code",[e._v("Relay")]),e._v("的"),n("code",[e._v("createFragmentContainer")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 高阶组件定义\nconst higherOrderComponent = (WrappedComponent) => {\n    return class EnhancedComponent extends React.Component {\n        // ...\n        render() {\n          return <WrappedComponent {...this.props} />;\n        }\n  };\n}\n\n// 普通组件定义\nclass WrappedComponent extends React.Component{\n    render(){\n        //....\n    }\n}\n\n// 返回被高阶组件包装过的增强组件\nconst EnhancedComponent = higherOrderComponent(WrappedComponent);\n")])])]),n("p",[e._v("在这里要注意，不要试图以任何方式在"),n("code",[e._v("HOC")]),e._v("中修改组件原型，而应该使用组合的方式，通过将组件包装在容器组件中实现功能。通常情况下，实现高阶组件的方式有以下两种:")]),e._v(" "),n("ul",[n("li",[e._v("属性代理"),n("code",[e._v("Props Proxy")]),e._v("。")]),e._v(" "),n("li",[e._v("反向继承"),n("code",[e._v("Inheritance Inversion")]),e._v("。")])]),e._v(" "),n("h4",{attrs:{id:"属性代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性代理"}},[e._v("#")]),e._v(" 属性代理")]),e._v(" "),n("p",[e._v("例如我们可以为传入的组件增加一个存储中的"),n("code",[e._v("id")]),e._v("属性值，通过高阶组件我们就可以为这个组件新增一个"),n("code",[e._v("props")]),e._v("，当然我们也可以对在"),n("code",[e._v("JSX")]),e._v("中的"),n("code",[e._v("WrappedComponent")]),e._v("组件中"),n("code",[e._v("props")]),e._v("进行操作，注意不是操作传入的"),n("code",[e._v("WrappedComponent")]),e._v("类，我们不应该直接修改传入的组件，而可以在组合的过程中对其操作。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const HOC = (WrappedComponent, store) => {\n    return class EnhancedComponent extends React.Component {\n        render() {\n            const newProps = {\n                id: store.id\n            }\n            return <WrappedComponent\n                {...this.props}\n                {...newProps}\n            />;\n        }\n    }\n}\n")])])]),n("p",[e._v("我们也可以利用高阶组件将新组件的状态装入到被包装组件中，例如我们可以使用高阶组件将非受控组件转化为受控组件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('class WrappedComponent extends React.Component {\n    render() {\n        return <input name="name" />;\n    }\n}\n\nconst HOC = (WrappedComponent) => {\n    return class EnhancedComponent extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = { name: "" };\n        }\n        render() {\n            const newProps = {\n                value: this.state.name,\n                onChange: e => this.setState({name: e.target.value}),\n            }\n            return <WrappedComponent \n                {...this.props} \n                {...newProps} \n            />;\n        }\n    }\n}\n')])])]),n("p",[e._v("或者我们的目的是将其使用其他组件包裹起来用以达成布局或者是样式的目的。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('const HOC = (WrappedComponent) => {\n    return class EnhancedComponent extends React.Component {\n        render() {\n            return (\n                <div class="layout">\n                    <WrappedComponent  {...this.props} />\n                </div>\n            );\n        }\n    }\n}\n')])])]),n("h4",{attrs:{id:"反向继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反向继承"}},[e._v("#")]),e._v(" 反向继承")]),e._v(" "),n("p",[e._v("反向继承是指返回的组件去继承之前的组件，在反向继承中我们可以做非常多的操作，修改"),n("code",[e._v("state")]),e._v("、"),n("code",[e._v("props")]),e._v("甚至是翻转"),n("code",[e._v("Element Tree")]),e._v("，反向继承有一个重要的点，反向继承不能保证完整的子组件树被解析，也就是说解析的元素树中包含了组件(函数类型或者"),n("code",[e._v("Class")]),e._v("类型)，就不能再操作组件的子组件了。"),n("br"),e._v("\n当我们使用反向继承实现高阶组件的时候可以通过渲染劫持来控制渲染，具体是指我们可以有意识地控制"),n("code",[e._v("WrappedComponent")]),e._v("的渲染过程，从而控制渲染控制的结果，例如我们可以根据部分参数去决定是否渲染组件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const HOC = (WrappedComponent) => {\n    return class EnhancedComponent extends WrappedComponent {\n        render() {\n            return this.props.isRender && super.render();  \n        }\n    }\n}\n")])])]),n("p",[e._v("甚至我们可以通过重写的方式劫持原组件的生命周期。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const HOC = (WrappedComponent) => {\n    return class EnhancedComponent extends WrappedComponent {\n        componentDidMount(){\n          // ...\n        }\n        render() {\n            return super.render();  \n        }\n    }\n}\n")])])]),n("p",[e._v("由于实际上是继承关系，我们可以去读取组件的"),n("code",[e._v("props")]),e._v("和"),n("code",[e._v("state")]),e._v("，如果有必要的话，甚至可以修改增加、修改和删除"),n("code",[e._v("props")]),e._v("和"),n("code",[e._v("state")]),e._v("，当然前提是修改带来的风险需要你自己来控制。在一些情况下，我们可能需要为高阶属性传入一些参数，那我们就可以通过柯里化的形式传入参数，配合高阶组件可以完成对组件的类似于闭包的操作。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const HOCFactoryFactory = (params) => {\n    // 此处操作params\n    return (WrappedComponent) => {\n        return class EnhancedComponent extends WrappedComponent {\n            render() {\n                return params.isRender && this.props.isRender && super.render();\n            }\n        }\n    }\n}\n")])])]),n("h3",{attrs:{id:"注意"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[e._v("#")]),e._v(" 注意")]),e._v(" "),n("h4",{attrs:{id:"不要改变原始组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不要改变原始组件"}},[e._v("#")]),e._v(" 不要改变原始组件")]),e._v(" "),n("p",[e._v("不要试图在"),n("code",[e._v("HOC")]),e._v("中修改组件原型，或以其他方式改变它。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function logProps(InputComponent) {\n  InputComponent.prototype.componentDidUpdate = function(prevProps) {\n    console.log("Current props: ", this.props);\n    console.log("Previous props: ", prevProps);\n  };\n  // 返回原始的 input 组件，其已经被修改。\n  return InputComponent;\n}\n\n// 每次调用 logProps 时，增强组件都会有 log 输出。\nconst EnhancedComponent = logProps(InputComponent);\n')])])]),n("p",[e._v("这样做会产生一些不良后果，其一是输入组件再也无法像"),n("code",[e._v("HOC")]),e._v("增强之前那样使用了，更严重的是，如果你再用另一个同样会修改"),n("code",[e._v("componentDidUpdate")]),e._v("的"),n("code",[e._v("HOC")]),e._v("增强它，那么前面的"),n("code",[e._v("HOC")]),e._v("就会失效，同时这个"),n("code",[e._v("HOC")]),e._v("也无法应用于没有生命周期的函数组件。"),n("br"),e._v("\n修改传入组件的"),n("code",[e._v("HOC")]),e._v("是一种糟糕的抽象方式，调用者必须知道他们是如何实现的，以避免与其他"),n("code",[e._v("HOC")]),e._v("发生冲突。"),n("code",[e._v("HOC")]),e._v("不应该修改传入组件，而应该使用组合的方式，通过将组件包装在容器组件中实现功能。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('function logProps(WrappedComponent) {\n  return class extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log("Current props: ", this.props);\n      console.log("Previous props: ", prevProps);\n    }\n    render() {\n      // 将 input 组件包装在容器中，而不对其进行修改，Nice!\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n}\n')])])]),n("h4",{attrs:{id:"过滤props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#过滤props"}},[e._v("#")]),e._v(" 过滤props")]),e._v(" "),n("p",[n("code",[e._v("HOC")]),e._v("为组件添加特性，自身不应该大幅改变约定，"),n("code",[e._v("HOC")]),e._v("返回的组件与原组件应保持类似的接口。"),n("code",[e._v("HOC")]),e._v("应该透传与自身无关的"),n("code",[e._v("props")]),e._v("，大多数"),n("code",[e._v("HOC")]),e._v("都应该包含一个类似于下面的"),n("code",[e._v("render")]),e._v("方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("render() {\n  // 过滤掉额外的 props，且不要进行透传\n  const { extraProp, ...passThroughProps } = this.props;\n\n  // 将 props 注入到被包装的组件中。\n  // 通常为 state 的值或者实例方法。\n  const injectedProp = someStateOrInstanceMethod;\n\n  // 将 props 传递给被包装组件\n  return (\n    <WrappedComponent\n      injectedProp={injectedProp}\n      {...passThroughProps}\n    />\n  );\n}\n")])])]),n("h4",{attrs:{id:"最大化可组合性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#最大化可组合性"}},[e._v("#")]),e._v(" 最大化可组合性")]),e._v(" "),n("p",[e._v("并不是所有的"),n("code",[e._v("HOC")]),e._v("都一样，有时候它仅接受一个参数，也就是被包裹的组件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const NavbarWithRouter = withRouter(Navbar);\n")])])]),n("p",[n("code",[e._v("HOC")]),e._v("通常可以接收多个参数，比如在"),n("code",[e._v("Relay")]),e._v("中"),n("code",[e._v("HOC")]),e._v("额外接收了一个配置对象用于指定组件的数据依赖。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const CommentWithRelay = Relay.createContainer(Comment, config);\n")])])]),n("p",[e._v("最常见的"),n("code",[e._v("HOC")]),e._v("签名如下，"),n("code",[e._v("connect")]),e._v("是一个返回高阶组件的高阶函数。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// React Redux 的 `connect` 函数\nconst ConnectedComment = connect(commentSelector, commentActions)(CommentList);\n\n// connect 是一个函数，它的返回值为另外一个函数。\nconst enhance = connect(commentListSelector, commentListActions);\n// 返回值为 HOC，它会返回已经连接 Redux store 的组件\nconst ConnectedComment = enhance(CommentList);\n")])])]),n("p",[e._v("这种形式可能看起来令人困惑或不必要，但它有一个有用的属性，像"),n("code",[e._v("connect")]),e._v("函数返回的单参数"),n("code",[e._v("HOC")]),e._v("具有签名"),n("code",[e._v("Component => Component")]),e._v("，输出类型与输入类型相同的函数很容易组合在一起。同样的属性也允许"),n("code",[e._v("connect")]),e._v("和其他"),n("code",[e._v("HOC")]),e._v("承担装饰器的角色。此外许多第三方库都提供了"),n("code",[e._v("compose")]),e._v("工具函数，包括"),n("code",[e._v("lodash")]),e._v("、"),n("code",[e._v("Redux")]),e._v("和"),n("code",[e._v("Ramda")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const EnhancedComponent = withRouter(connect(commentSelector)(WrappedComponent))\n\n// 你可以编写组合工具函数\n// compose(f, g, h) 等同于 (...args) => f(g(h(...args)))\nconst enhance = compose(\n  // 这些都是单参数的 HOC\n  withRouter,\n  connect(commentSelector)\n)\nconst EnhancedComponent = enhance(WrappedComponent)\n")])])]),n("h4",{attrs:{id:"不要在render方法中使用hoc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#不要在render方法中使用hoc"}},[e._v("#")]),e._v(" 不要在render方法中使用HOC")]),e._v(" "),n("p",[n("code",[e._v("React")]),e._v("的"),n("code",[e._v("diff")]),e._v("算法使用组件标识来确定它是应该更新现有子树还是将其丢弃并挂载新子树，如果从"),n("code",[e._v("render")]),e._v("返回的组件与前一个渲染中的组件相同"),n("code",[e._v("===")]),e._v("，则"),n("code",[e._v("React")]),e._v("通过将子树与新子树进行区分来递归更新子树，如果它们不相等，则完全卸载前一个子树。"),n("br"),e._v("\n通常在使用的时候不需要考虑这点，但对"),n("code",[e._v("HOC")]),e._v("来说这一点很重要，因为这代表着你不应在组件的"),n("code",[e._v("render")]),e._v("方法中对一个组件应用"),n("code",[e._v("HOC")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("render() {\n  // 每次调用 render 函数都会创建一个新的 EnhancedComponent\n  // EnhancedComponent1 !== EnhancedComponent2\n  const EnhancedComponent = enhance(MyComponent);\n  // 这将导致子树每次渲染都会进行卸载，和重新挂载的操作！\n  return <EnhancedComponent />;\n}\n")])])]),n("p",[e._v("这不仅仅是性能问题，重新挂载组件会导致该组件及其所有子组件的状态丢失，如果在组件之外创建"),n("code",[e._v("HOC")]),e._v("，这样一来组件只会创建一次。因此每次"),n("code",[e._v("render")]),e._v("时都会是同一个组件，一般来说，这跟你的预期表现是一致的。在极少数情况下，你需要动态调用"),n("code",[e._v("HOC")]),e._v("，你可以在组件的生命周期方法或其构造函数中进行调用。")]),e._v(" "),n("h4",{attrs:{id:"务必复制静态方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#务必复制静态方法"}},[e._v("#")]),e._v(" 务必复制静态方法")]),e._v(" "),n("p",[e._v("有时在"),n("code",[e._v("React")]),e._v("组件上定义静态方法很有用，例如"),n("code",[e._v("Relay")]),e._v("容器暴露了一个静态方法"),n("code",[e._v("getFragment")]),e._v("以方便组合"),n("code",[e._v("GraphQL")]),e._v("片段。但是当你将"),n("code",[e._v("HOC")]),e._v("应用于组件时，原始组件将使用容器组件进行包装，这意味着新组件没有原始组件的任何静态方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 定义静态函数\nWrappedComponent.staticMethod = function() {/*...*/}\n// 现在使用 HOC\nconst EnhancedComponent = enhance(WrappedComponent);\n\n// 增强组件没有 staticMethod\ntypeof EnhancedComponent.staticMethod === "undefined" // true\n')])])]),n("p",[e._v("为了解决这个问题，你可以在返回之前把这些方法拷贝到容器组件上。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function enhance(WrappedComponent) {\n  class Enhance extends React.Component {/*...*/}\n  // 必须准确知道应该拷贝哪些方法 :(\n  Enhance.staticMethod = WrappedComponent.staticMethod;\n  return Enhance;\n}\n")])])]),n("p",[e._v("但要这样做，你需要知道哪些方法应该被拷贝，你可以使用"),n("code",[e._v("hoist-non-react-statics")]),e._v("依赖自动拷贝所有非"),n("code",[e._v("React")]),e._v("静态方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import hoistNonReactStatic from "hoist-non-react-statics";\nfunction enhance(WrappedComponent) {\n  class Enhance extends React.Component {/*...*/}\n  hoistNonReactStatic(Enhance, WrappedComponent);\n  return Enhance;\n}\n')])])]),n("p",[e._v("除了导出组件，另一个可行的方案是再额外导出这个静态方法。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 使用这种方式代替...\nMyComponent.someFunction = someFunction;\nexport default MyComponent;\n\n// ...单独导出该方法...\nexport { someFunction };\n\n// ...并在要使用的组件中，import 它们\nimport MyComponent, { someFunction } from "./MyComponent.js";\n')])])]),n("h4",{attrs:{id:"refs不会被传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#refs不会被传递"}},[e._v("#")]),e._v(" Refs不会被传递")]),e._v(" "),n("p",[e._v("虽然高阶组件的约定是将所有"),n("code",[e._v("props")]),e._v("传递给被包装组件，但这对于"),n("code",[e._v("refs")]),e._v("并不适用，那是因为"),n("code",[e._v("ref")]),e._v("实际上并不是一个"),n("code",[e._v("prop")]),e._v("，就像"),n("code",[e._v("key")]),e._v("一样，它是由"),n("code",[e._v("React")]),e._v("专门处理的。如果将"),n("code",[e._v("ref")]),e._v("添加到"),n("code",[e._v("HOC")]),e._v("的返回组件中，则"),n("code",[e._v("ref")]),e._v("引用指向容器组件，而不是被包装组件，这个问题可以通过"),n("code",[e._v("React.forwardRef")]),e._v("这个"),n("code",[e._v("API")]),e._v("明确地将"),n("code",[e._v("refs")]),e._v("转发到内部的组件。。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function logProps(Component) {\n  class LogProps extends React.Component {\n    componentDidUpdate(prevProps) {\n      console.log('old props:', prevProps);\n      console.log('new props:', this.props);\n    }\n\n    render() {\n      const {forwardedRef, ...rest} = this.props;\n\n      // 将自定义的 prop 属性 “forwardedRef” 定义为 ref\n      return <Component ref={forwardedRef} {...rest} />;\n    }\n  }\n\n  // 注意 React.forwardRef 回调的第二个参数 “ref”。\n  // 我们可以将其作为常规 prop 属性传递给 LogProps，例如 “forwardedRef”\n  // 然后它就可以被挂载到被 LogProps 包裹的子组件上。\n  return React.forwardRef((props, ref) => {\n    return <LogProps {...props} forwardedRef={ref} />;\n  });\n}\n")])])]),n("h2",{attrs:{id:"render-props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#render-props"}},[e._v("#")]),e._v(" Render Props")]),e._v(" "),n("p",[e._v("与"),n("code",[e._v("HOC")]),e._v("一样，"),n("code",[e._v("Render Props")]),e._v("也是一直以来都存在的元老级模式，"),n("code",[e._v("render props")]),e._v("指在一种"),n("code",[e._v("React")]),e._v("组件之间使用一个值为函数的"),n("code",[e._v("props")]),e._v("共享代码的简单技术，具有"),n("code",[e._v("render props")]),e._v("的组件接收一个函数，该函数返回一个"),n("code",[e._v("React")]),e._v("元素并调用它而不是实现一个自己的渲染逻辑，"),n("code",[e._v("render props")]),e._v("是一个用于告知组件需要渲染什么内容的函数"),n("code",[e._v("props")]),e._v("，也是组件逻辑复用的一种实现方式，简单来说就是在被复用的组件中，通过一个名为"),n("code",[e._v("render")]),e._v("(属性名也可以不是"),n("code",[e._v("render")]),e._v("，只要值是一个函数即可)的"),n("code",[e._v("prop")]),e._v("属性，该属性是一个函数，这个函数接受一个对象并返回一个子组件，会将这个函数参数中的对象作为"),n("code",[e._v("props")]),e._v("传入给新生成的组件，而在使用调用者组件这里，只需要决定这个组件在哪里渲染以及该以何种逻辑渲染并传入相关对象即可。"),n("br"),e._v("\n对比"),n("code",[e._v("HOC")]),e._v("与"),n("code",[e._v("Render Props")]),e._v("，技术上，二者都基于组件组合机制，"),n("code",[e._v("Render Props")]),e._v("拥有与"),n("code",[e._v("HOC")]),e._v("一样的扩展能力，称之为"),n("code",[e._v("Render Props")]),e._v("，并不是说只能用来复用渲染逻辑，而是表示在这种模式下，组件是通过"),n("code",[e._v("render")]),e._v("()组合起来的，类似于"),n("code",[e._v("HOC")]),e._v("模式下通过"),n("code",[e._v("Wrapper")]),e._v("的"),n("code",[e._v("render")]),e._v("()建立组合关系形式上，二者非常相像，同样都会产生一层"),n("code",[e._v("Wrapper")]),e._v("，而实际上"),n("code",[e._v("Render Props")]),e._v("与"),n("code",[e._v("HOC")]),e._v("甚至能够相互转换。"),n("br"),e._v("\n同样，"),n("code",[e._v("Render Props")]),e._v("也会存在一些问题:")]),e._v(" "),n("ul",[n("li",[e._v("数据流向更直观了，子孙组件可以很明确地看到数据来源，但本质上"),n("code",[e._v("Render Props")]),e._v("是基于闭包实现的，大量地用于组件的复用将不可避免地引入了"),n("code",[e._v("callback hell")]),e._v("问题。")]),e._v(" "),n("li",[e._v("丢失了组件的上下文，因此没有"),n("code",[e._v("this.props")]),e._v("属性，不能像"),n("code",[e._v("HOC")]),e._v("那样访问"),n("code",[e._v("this.props.children")]),e._v("。")])]),e._v(" "),n("h3",{attrs:{id:"示例-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-3"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset="UTF-8" />\n    <title>React</title>\n</head>\n\n<body>\n    <div id="root"></div>\n</body>\n<script src="https://unpkg.com/react@17/umd/react.development.js"><\/script>\n<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"><\/script>\n<script src="https://unpkg.com/@babel/standalone/babel.min.js"><\/script>\n<script type="text/babel">\nclass MouseTracker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { x: 0,  y: 0, }\n  }\n  handleMouseMove = (event) => {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY\n    });\n  }\n  render() {\n    return (\n      <div onMouseMove={this.handleMouseMove}>\n        {this.props.render(this.state)} {/* Render Props */}\n      </div>\n    )\n  }\n}\n\nclass MouseLocation extends React.Component {\n  render() {\n    return (\n      <>\n        <h1>请在此处移动鼠标</h1>\n        <p>当前鼠标的位置是: x:{this.props.mouse.x} y:{this.props.mouse.y}</p>\n      </>\n    )\n  }\n}\n\nReactDOM.render(\n  <MouseTracker render={mouse => <MouseLocation mouse={mouse} />}></MouseTracker>, \n  document.getElementById("root")\n);\n<\/script>\n\n</html>\n')])])]),n("h2",{attrs:{id:"hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hooks"}},[e._v("#")]),e._v(" Hooks")]),e._v(" "),n("p",[e._v("代码复用的解决方案层出不穷，但是整体来说代码复用还是很复杂的，这其中很大一部分原因在于细粒度代码复用不应该与组件复用捆绑在一起，"),n("code",[e._v("HOC")]),e._v("、"),n("code",[e._v("Render Props")]),e._v("等基于组件组合的方案，相当于先把要复用的逻辑包装成组件，再利用组件复用机制实现逻辑复用，自然就受限于组件复用，因而出现扩展能力受限、"),n("code",[e._v("Ref")]),e._v("隔断、"),n("code",[e._v("Wrapper Hell")]),e._v("等问题，那么我们就需要有一种简单直接的代码复用方式，函数，将可复用逻辑抽离成函数应该是最直接、成本最低的代码复用方式，但对于状态逻辑，仍然需要通过一些抽象模式(如"),n("code",[e._v("Observable")]),e._v(")才能实现复用，这正是"),n("code",[e._v("Hooks")]),e._v("的思路，将函数作为最小的代码复用单元，同时内置一些模式以简化状态逻辑的复用。比起上面提到的其它方案，"),n("code",[e._v("Hooks")]),e._v("让组件内逻辑复用不再与组件复用捆绑在一起，是真正在从下层去尝试解决(组件间)细粒度逻辑的复用问题此外，这种声明式逻辑复用方案将组件间的显式数据流与组合思想进一步延伸到了组件内。"),n("br"),e._v("\n当然"),n("code",[e._v("Hooks")]),e._v("也并非完美，只是就目前而言，其缺点如下:")]),e._v(" "),n("ul",[n("li",[e._v("额外的学习成本，主要在于"),n("code",[e._v("Functional Component")]),e._v("与"),n("code",[e._v("Class Component")]),e._v("之间的比较上。")]),e._v(" "),n("li",[e._v("写法上有限制(不能出现在条件、循环中)，并且写法限制增加了重构成本。")]),e._v(" "),n("li",[e._v("破坏了"),n("code",[e._v("PureComponent")]),e._v("、"),n("code",[e._v("React.memo")]),e._v("浅比较的性能优化效果，为了取最新的"),n("code",[e._v("props")]),e._v("和"),n("code",[e._v("state")]),e._v("，每次"),n("code",[e._v("render")]),e._v("()都要重新创建事件处函数。")]),e._v(" "),n("li",[e._v("在闭包场景可能会引用到旧的"),n("code",[e._v("state")]),e._v("、"),n("code",[e._v("props")]),e._v("值。")]),e._v(" "),n("li",[e._v("内部实现上不直观，依赖一份可变的全局状态，不再那么"),n("code",[e._v("pure")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("React.memo")]),e._v("并不能完全替代"),n("code",[e._v("shouldComponentUpdate")]),e._v("(因为拿不到"),n("code",[e._v("state change")]),e._v("，只针对"),n("code",[e._v("props change")]),e._v(")。")]),e._v(" "),n("li",[n("code",[e._v("useState API")]),e._v("设计上不太完美。")])]),e._v(" "),n("h3",{attrs:{id:"示例-4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例-4"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<!DOCTYPE html>\n<html>\n\n<head>\n    <meta charset="UTF-8" />\n    <title>React</title>\n</head>\n\n<body>\n    <div id="root"></div>\n</body>\n<script src="https://unpkg.com/react@17/umd/react.development.js"><\/script>\n<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"><\/script>\n<script src="https://unpkg.com/@babel/standalone/babel.min.js"><\/script>\n<script type="text/babel">\n  const {useState, useEffect} = React;\n\n  function useMouseLocation(location){\n    return (\n      <>\n        <h1>请在此处移动鼠标</h1>\n        <p>当前鼠标的位置是: x:{location.x} y:{location.y}</p>\n      </>\n    );\n  }\n\n  function MouseTracker(props){\n    const [x, setX] = useState(0);\n    const [y, setY] = useState(0);\n\n    function handleMouseMove(event){\n        setX(event.clientX);\n        setY(event.clientY);\n    }\n    return (\n      <div onMouseMove={handleMouseMove}>\n        {useMouseLocation({x, y})}\n      </div>\n    )\n  }\n\n  ReactDOM.render(\n    <MouseTracker/>, \n    document.getElementById("root")\n  );\n<\/script>\n\n</html>\n\n')])])]),n("h2",{attrs:{id:"每日一题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[e._v("#")]),e._v(" 每日一题")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("https://github.com/WindrunnerMax/EveryDay\n")])])]),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("https://zhuanlan.zhihu.com/p/38136388\nhttps://juejin.cn/post/6844903910470057997\nhttps://juejin.cn/post/6844903850038525959\nhttps://my.oschina.net/u/4663041/blog/4588963\nhttps://zh-hans.reactjs.org/docs/hooks-intro.html\nhttps://zh-hans.reactjs.org/docs/hooks-effect.html\nhttps://react-cn.github.io/react/docs/reusable-components.html\nhttp://www.ayqy.net/blog/react%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%BB%E8%BE%91%E5%A4%8D%E7%94%A8/\n")])])])])}),[],!1,null,null,null);n.default=v.exports}}]);